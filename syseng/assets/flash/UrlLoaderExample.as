package {    import flash.display.Sprite;    import flash.events.*;    import flash.net.*;    public class UrlLoaderExample extends Sprite {                private var loader:URLLoader;        public function UrlLoaderExample() {            loader = new URLLoader();            configureListeners(loader);            var request:URLRequest = new URLRequest("http://qualoccupy.azurewebsites.net/pollrooms.php");            try {                loader.load(request);            } catch (error:Error) {                trace("Unable to load requested document.");            }        }        private function configureListeners(dispatcher:IEventDispatcher):void {            dispatcher.addEventListener(Event.COMPLETE, completeHandler);            dispatcher.addEventListener(Event.OPEN, openHandler);            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);        }        private function completeHandler(event:Event):void {            var loader:URLLoader = URLLoader(event.target);            trace("completeHandler: " + loader.data);                var object:Object = JSON.parse(loader.data);			var array:Array = object as Array;			            trace("The Room1ID is " + array[0].RoomID + "Number of people is " + array[0].NumberOfPeople);        }        private function openHandler(event:Event):void {            trace("openHandler: " + event);        }        private function progressHandler(event:ProgressEvent):void {            trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);        }        private function securityErrorHandler(event:SecurityErrorEvent):void {            trace("securityErrorHandler: " + event);        }        private function httpStatusHandler(event:HTTPStatusEvent):void {            trace("httpStatusHandler: " + event);        }        private function ioErrorHandler(event:IOErrorEvent):void {            trace("ioErrorHandler: " + event);        }    }}